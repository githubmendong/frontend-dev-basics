/**
 * 변수와 범위(scope)
 * 1. 자바스크립트는 기본적으로 코드에서 변수의 범위를 알 수 있다. (정적 스코프, Lexical Scope)
 * 2. 자바스크립트의 scope
 *  - 전역 범위
 *  - ES6 이전 (<=ES5)
 *      자바와 같은 블록 범위 ({}) 를 지원하지 않았다.
 *      함수 범위만 지원한다.
 *      var 키워드를 사용해야 함수 범위를 가진다.
 *      만일 사용하지만 그 변수는 전역 범위를 가진다 (hoisting)
 *   - ES6 이후 (ES6 ~ ES2022)
 *      자바와 같은 블록 범위를 지원한다.
 *      let : 키워드를 사용해서 블록 범위를 가지게 한다.
 *      const : 키워드는 블록 범위의 상수를 정의할 때 사용한다.
 *      
 *    - const. let만 사용하고 둘 중 하나를 반드시 사용하자!!!!!!!!!!!! (안붙
 */

let i = 20;
let f = function () {
    let i = 20;  // 이 변수는 함수 f 내에서만 유효합니다.
    let j = 100;
    console.log(i);  //  함수 내부의 i를 출력합니다 (20).
    i = j - i;  //  함수 내부의 i를 변경합니다 (i는 100 - 20으로 업데이트됩니다).
}

f();  // 함수를 호출합니다.

console.log(i);  //  함수 밖에서의 i를 출력합니다 (여전히 20).
console.log(j);  // j는 함수 f 내부에서 선언되었으므로 함수 외부에서 접근할 수 없습니다.
console.log("=== var 키워드 함수 블록에서만 범위를 만든다.");
if (90 + 10 === 100){
    var k = 10;
}

console.log(k);

{
    let x = 1000;
    const PI = 3.14;

    x = 100;
}


